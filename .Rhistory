clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
View(sim_data)
## MultiCOCA
# Load function
source("simulateGMM.R")
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "hclust")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Load packages
library(mclust)
library(coca)
# COCA function
clusterofclusters <- function(data, MN = 20, max.iter = 20000) {
# Initialize a list for model-based clustering results and number of clusters
mclust1 <- vector("list", ncol(data))
G <- vector("numeric", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each column and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
classification[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Convert to factor (to ensure proper binary encoding)
classification <- as.data.frame(lapply(classification, as.factor))
# Create the MOC
moc <- do.call(cbind, lapply(classification, function(x) model.matrix(~ x - 1)))
moc <- as.matrix(moc)
# Fit Cluster of Cluster Analysis
outputCOCA <- coca(moc, B = MN, maxIterKM = max.iter)
return(outputCOCA)
}
outputCOCA <- clusterofclusters(sim_data)
(num_clust <- outputCOCA$K)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## MultiCOCA
# Load function
source("simulateGMM.R")
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Load packages
library(mclust)
library(coca)
# COCA function
clusterofclusters <- function(data, MN = 20, max.iter = 20000) {
# Initialize a list for model-based clustering results and number of clusters
mclust1 <- vector("list", ncol(data))
G <- vector("numeric", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each column and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
classification[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Convert to factor (to ensure proper binary encoding)
classification <- as.data.frame(lapply(classification, as.factor))
# Create the MOC
moc <- do.call(cbind, lapply(classification, function(x) model.matrix(~ x - 1)))
moc <- as.matrix(moc)
# Fit Cluster of Cluster Analysis
outputCOCA <- coca(moc, B = MN, maxIterKM = max.iter)
return(outputCOCA)
}
outputCOCA <- clusterofclusters(sim_data)
(num_clust <- outputCOCA$K)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
rm(list=ls())
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data, random_seed = 4881)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
outputCOCA <- clusterofclusters(sim_data, random_seed = 4881)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data, random_seed = 4881)
## clusterofclusters.R
clusterofclusters <- function(data,              # Input as data frame
N = 6,            # Number of iterations of Consensus Clustering step
max.iter = 1000,   # Maximum number of iterations for k-means clustering
random_seed       # Input random seed for reproducibility
)
{
# Load packages - write into dependencies when writing package.
library(mclust)
library(coca)
# Initialize a list for model-based clustering results and number of clusters
mclust1 <- vector("list", ncol(data))
G <- vector("numeric", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each column and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
classification[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Convert to factor (to ensure proper binary encoding)
classification <- as.data.frame(lapply(classification, as.factor))
# Create the MOC
moc <- do.call(cbind, lapply(classification, function(x) model.matrix(~ x - 1)))
moc <- as.matrix(moc)
# Set seed
set.seed(random_seed)
# Fit Cluster of Cluster Analysis
outputCOCA <- coca(moc, B = N, maxIterKM = max.iter)
return(outputCOCA)
}
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
outputCOCA <- clusterofclusters(sim_data, random_seed = 4881)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
outputCOCA <- clusterofclusters(sim_data)
stats::hclust(distances, method = hclustMethod)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
outputCOCA <- clusterofclusters(sim_data)
outputCOCA <- coca(moc, B = N, maxIterKM = max.iter)
debug(clusterofclusters)
outputCOCA <- clusterofclusters(sim_data)
classification <- as.data.frame(lapply(classification, as.factor))
library(mclust)
library(coca)
mclust1 <- vector("list", ncol(data))
G <- vector("numeric", ncol(data))
classification <- as.data.frame(matrix(NA, nrow = nrow(data),
ncol = ncol(data)))
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
classification[, i] <- mclust1[[i]]$classification
}
classification <- as.data.frame(lapply(classification, as.factor))
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
View(outputCOCA)
View(outputCOCA)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
View(outputCOCA)
## clusterofclusters.R
clusterofclusters <- function(data,              # Input as data frame
N = 2000,          # Number of iterations of Consensus Clustering step
max.iter = 2000,   # Maximum number of iterations for k-means clustering
random_seed        # Input random seed for reproducibility
)
{
# Load packages - write into dependencies when writing package.
library(mclust)
library(coca)
# Initialize a list for model-based clustering results and number of clusters
mclust1 <- vector("list", ncol(data))
G <- vector("numeric", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each column and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
classification[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Convert to factor (to ensure proper binary encoding)
classification <- as.data.frame(lapply(classification, as.factor))
# Create the MOC
moc <- do.call(cbind, lapply(classification, function(x) model.matrix(~ x - 1)))
moc <- as.matrix(moc)
colnames(moc) <- NULL
# Fit Cluster of Cluster Analysis
outputCOCA <- coca::coca(moc, B = N, maxIterKM = max.iter)
return(outputCOCA)
}
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "hclust")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters, clusters2)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on simulated data
outputCOCA <- clusterofclusters(sim_data)
