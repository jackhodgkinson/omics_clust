View(example1)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
### Load function
source("simulateGMM.R")
### Testing
## Parameters - means far apart
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
### Testing
## Parameters - means far apart
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
# Seperate data into data and clusters
example2_data <- example2[[1]]
clusters <- example2_data$cluster
example2 <- example2_data[, 1:N_col]
# Assign column names
colnames(example2_data) <- paste0("Protein", 1:N_col)
# Assign labels to the clusters
clusters <- factor(clusters, labels = c("1","2","Unassigned"))
# Produce heatmap
example2_new <- as.matrix(example2_data)
annotationRow <- as.data.frame(clusters)
names(annotationRow) <- "Clusters"
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow)
example2_new
example2_data <- example2[[1]]
clusters <- example2_data$cluster
## Test: two clustering structures defined randomly
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
# Seperate data into data and clusters
example2_data <- example2[[1]]
clusters <- example2_data$cluster
example2_data <- example2_data[, 1:N_col]
# Assign column names
colnames(example2_data) <- paste0("Protein", 1:N_col)
# Assign labels to the clusters
clusters <- factor(clusters, labels = c("1","2","Unassigned"))
# Produce heatmap
example2_new <- as.matrix(example2_data)
annotationRow <- as.data.frame(clusters)
names(annotationRow) <- "Clusters"
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow)
annotationCol <- as.data.frame("ProteinClusters" = example2[[2]])
annotationCol <- as.data.frame(ProteinClusters = example2[[2]])
annotationCol <- as.data.frame(example2[[2]])
names(annotationCol) <- "ProteinClusters"
colnames(example2_new)
rownames(annotationCol) <- colnames(example2_new)
colnames(example2_new)
annotationCol
annotationCol <- as.data.frame(example2[[2]])
names(annotationCol) <- "ProteinClusters"
rownames(annotationCol) <- colnames(example2_new)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow, annotation_col = annotationCol)
annotationCol <- as.data.frame(as.factor(example2[[2]]))
names(annotationCol) <- "ProteinClusters"
rownames(annotationCol) <- colnames(example2_new)
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow, annotation_col = annotationCol)
order(clusters)
pheatmap::pheatmap(example2_new[order(clusters),], annotation_row = annotationRow,
annotation_col = annotationCol, cluster_rows = F)
View(example2)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# # Simulated data
# seed <- 4881
# set.seed(seed)
# N_col <- 10
# params1 <- list(
#   cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
#   cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
#   cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
# data <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col,
#                         random_seed = seed, equal_clust = FALSE, equal_groups = FALSE)
# true_clusters <- data[[2]]
# true_groups <- data[[3]]
# data <- data[[1]]
# Data from COCA package
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
data[[1]]
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Create empty list for mclust and classification data frame
mclust <- vector("list", N_col)
N_row <- nrow(data[[1]])
N_col <- ncol(data[[1]])
N_row <- nrow(data[[1]])
# Create empty list for mclust and classification data frame
mclust <- vector("list", N_col)
classification <- as.data.frame(matrix(NA, nrow = N_row, ncol = N_col))
set.seed(seed)
seed <- 4881
# Fit Mclust to each protein to obtain classification
set.seed(seed)
for (i in 1:length(data)) {
colnames(data[[i]]) <- NULL
mclust[[i]] <- Mclust(data[[i]])
classification[, i] <- mclust[[i]]$classification  # Store clustered data column-wise
}
# Construct similarity matrix
sim_matrix <- matrix(0, nrow = ncol(classification), ncol = ncol(classification),
dimnames = list(colnames(classification), colnames(classification)))
View(sim_matrix)
set.seed(seed)
for (i in 1:ncol(classification)){
for(j in 1:ncol(classification)){
sim_matrix[i,j] <- adjustedRandIndex(classification[[i]], classification[[j]])
}
}
# Convert to dissimilarity matrix
dissim_matrix <- 1 - sim_matrix
dist_mat <- as.dist(dissim_matrix)
# Here we should add a threshold whether the data needs splitting into groups or not!
# Apply hclust to dissim_matrix - complete gives same as intended input.
hclust <- hclust(dist_mat)
plot(hclust)
set.seed(seed)
opt <- NbClust(diss = dist_mat, distance = NULL, method = "complete",
min.nc = 2, max.nc = ceiling(sqrt(ncol(dissim_matrix)/2)), index = "silhouette")
# Need to figure out how to select maximum but penalise as number of clusters increases.
if (is.vector(opt$Best.nc)) {
opt_ng <- as.numeric(opt$Best.nc[1])
} else {
opt_ng <- as.numeric(names(which.max(table(opt$Best.nc[1, ]))))
}
# Split dendogram
groups <- cutree(hclust, k = opt_ng)
# Split the columns into datasets by group
data_group <- list()
for(i in 1:length(unique(groups))){
data_group[[i]] <- classification[groups == i]
names(data_group)[[i]] <- paste0("Group",i)
}
# Create a MOC for each data group
moc <- constructMOC(data_group)
# Feed into COCA for each data group
results <- multicoca(moc, random_seed = 4881, N = 10000, max.iter = 10000)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, equal_clust = FALSE, equal_groups = FALSE)
true_clusters1 <- data1[[2]]
data1 <- data1[[1]]
data2 <- simulateGMM(3, 1, params1, n_indiv = 450, n_col = N_col,
random_seed = 12345, equal_clust = FALSE, equal_groups = FALSE)
true_clusters2 <- data1[[2]]
data2 <- data1[[1]]
data <- list(data1, data2)
clusters <- cbind(true_clusters1, true_clusters2)
View(clusters)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, equal_clust = FALSE, equal_groups = FALSE)
true_clusters1 <- data1[[2]]
data1 <- data1[[1]]
data2 <- simulateGMM(3, 1, params1, n_indiv = 450, n_col = N_col,
random_seed = 12345, equal_clust = FALSE, equal_groups = FALSE)
true_clusters2 <- data2[[2]]
data2 <- data2[[1]]
data <- list(data1, data2)
clusters <- cbind(true_clusters1, true_clusters2)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 7
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
clusters <- sample(c(1,2,3), 450, replace = TRUE, prob = {p <- runif(length(c(1,2,3))); p / sum(p)})
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, cluster_labs = clusters,
equal_clust = FALSE, equal_groups = FALSE)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 7
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
clusters <- sample(c(1,2,3), 450, replace = TRUE, prob = {p <- runif(length(c(1,2,3))); p / sum(p)})
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 7
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
clusters <- sample(c(1,2,3), 450, replace = TRUE, prob = {p <- runif(length(c(1,2,3))); p / sum(p)})
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data1 <- data1[[1]]
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
data2 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = 12345, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data2 <- data2[[1]]
data <- list(data1, data2)
# Create empty list for mclust and classification data frame
mclust <- vector("list", N_col)
classification <- as.data.frame(matrix(NA, nrow = N_row, ncol = N_col))
nrow(data)
max(nrow(data))
data[[1]]
length(data)
# Cluster each column if single dataset
if (class(data) != "list") {
# Create empty list for mclust and classification data frame
mclust <- vector("list", ncol(data))
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data))
# Convert data frame to a list of columns
data <- as.list(data)
# Cluster each column if single dataset
if (class(data) != "list") {
# Create empty list for mclust and classification data frame
mclust <- vector("list", ncol(data))
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Convert data frame to a list of columns
data <- as.list(data)
# Fit Mclust to each protein to obtain classification
set.seed(seed)
for (i in 1:length(data)) {
colnames(data[[i]]) <- NULL
mclust[[i]] <- Mclust(data[[i]])
classification[, i] <- mclust[[i]]$classification  # Store clustered data column-wise
}
}
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 7
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
clusters <- sample(c(1,2,3), 450, replace = TRUE, prob = {p <- runif(length(c(1,2,3))); p / sum(p)})
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data1 <- data1[[1]]
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
data2 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = 12345, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data2 <- data2[[1]]
data <- list(data1, data2)
# Data from COCA package
# seed <- 4881
# data <- list()
# data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
#                                             package = "coca"), row.names = 1))
# data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
#                                             package = "coca"), row.names = 1))
# data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
#                                             package = "coca"), row.names = 1))
#
# true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
#                                               package = "coca"), row.names = 1))
#
# N_col <- ncol(data[[1]])
# N_row <- nrow(data[[1]])
# Cluster each column if single dataset
if (class(data) != "list") {
# Create empty list for mclust and classification data frame
mclust <- vector("list", ncol(data))
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Convert data frame to a list of columns
data <- as.list(data)
# Fit Mclust to each protein to obtain classification
set.seed(seed)
for (i in 1:length(data)) {
colnames(data[[i]]) <- NULL
mclust[[i]] <- Mclust(data[[i]])
classification[, i] <- mclust[[i]]$classification  # Store clustered data column-wise
}
}
# Cluster each column if a list of datasets
else {
## COCA test
# Load packages
library(mclust)
library(NbClust)
# Load external functions
source("simulateGMM.R")
source("constructMOC.R")
source("clusterofclusters.R")
source("multicoca.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- 7
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
clusters <- sample(c(1,2,3), 450, replace = TRUE, prob = {p <- runif(length(c(1,2,3))); p / sum(p)})
data1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = seed, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data1 <- data1[[1]]
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
data2 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col,
random_seed = 12345, cluster_labels = clusters,
equal_clust = FALSE, equal_groups = FALSE)
data2 <- data2[[1]]
data <- list(data1, data2)
# Data from COCA package
# seed <- 4881
# data <- list()
# data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
#                                             package = "coca"), row.names = 1))
# data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
#                                             package = "coca"), row.names = 1))
# data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
#                                             package = "coca"), row.names = 1))
#
# true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
#                                               package = "coca"), row.names = 1))
#
# N_col <- ncol(data[[1]])
# N_row <- nrow(data[[1]])
# Cluster each column if single dataset
if (class(data) != "list") {
# Create empty list for mclust and classification data frame
mclust <- vector("list", ncol(data))
classification <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Convert data frame to a list of columns
data2 <- as.list(data)
# Fit Mclust to each protein to obtain classification
set.seed(seed)
for (i in 1:length(data2)) {
colnames(data2[[i]]) <- NULL
mclust2[[i]] <- Mclust(data2[[i]])
classification[, i] <- mclust[[i]]$classification  # Store clustered data column-wise
}
}
# Cluster each column if a list of datasets
else {
