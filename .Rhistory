n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
counter <- counter + 1
print(counter)
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Counter for the loops
counter <- 0
# Initialise log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
counter <- counter + 1
log_entry <- paste0("data",counter,".csv",":\n")
cat(log_entry, file = log_file, append = TRUE)
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
for (sim in 1:sim_total) {
# Calculate dataset offset for this simulation
counter2 <- if (sim == 1) 0 else (sim - 1) * datasets_per_sim
counter <- counter2  # Initialize dataset counter for this simulation
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
counter <- counter + 1  # Unique dataset number across all sims
seed <- counter  # Use as seed if desired
log_entry <- paste0("data", counter, ".csv: Sim ", sim, ", Seed = ", seed, "\n")
cat(log_entry, file = log_file, append = TRUE)
# set.seed(seed)
# run simulation and save data
}
}
}
# After first sim, determine how many datasets there are
if (sim == 1) {
datasets_per_sim <- counter  # Now we know how many datasets are per sim
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
for (sim in 1:sim_total) {
# Calculate dataset offset for this simulation
counter2 <- if (sim == 1) 0 else (sim - 1) * datasets_per_sim
counter <- counter2  # Initialize dataset counter for this simulation
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
counter <- counter + 1  # Unique dataset number across all sims
r_seed <- seed + counter  # Use as seed if desired
log_entry <- paste0("data", counter, ".csv: Sim ", sim, ", Seed = ", seed, "\n")
cat(log_entry, file = log_file, append = TRUE)
# set.seed(seed)
# run simulation and save data
}
}
}
# After first sim, determine how many datasets there are
if (sim == 1) {
datasets_per_sim <- counter  # Now we know how many datasets are per sim
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Set seed
set.seed(seed)
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
# Dataset counter
counter <- 0
# Simulation loop
for (sim in 1:sim_total) {
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
counter <- counter + 1
# Generate unique seed based on base + counter
this_seed <- seed + counter
set.seed(this_seed)
log_entry <- paste0("data", counter, ".csv \n Simulation:", sim, ", Seed: ", this_seed, "\n", "\n")
cat(log_entry, file = log_file, append = TRUE)
# Your simulation using `this_seed`
}
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Set seed
set.seed(seed)
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
# Dataset counter
counter <- 0
# Simulation loop
for (sim in 1:sim_total) {
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
# Generate unique seed based on base + counter
this_seed <- seed + counter
set.seed(this_seed)
log_entry <- paste0("data", counter, ".csv \n Simulation:", sim, ", Seed: ", this_seed, "\n", "\n")
cat(log_entry, file = log_file, append = TRUE)
# Your simulation using `this_seed`
# Reset counter
counter <- counter + 1
}
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Set seed
set.seed(seed)
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
# Dataset counter
counter <- 0
# Simulation loop
for (sim in 1:sim_total) {
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
# Generate unique seed based on base + counter
this_seed <- seed + counter
set.seed(this_seed)
log_entry <- paste0("data", counter, ".csv \nSimulation:", sim, ", Seed: ", this_seed, "\n", "\n")
cat(log_entry, file = log_file, append = TRUE)
# Your simulation using `this_seed`
# Reset counter
counter <- counter + 1
}
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Set seed
set.seed(seed)
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
# Dataset and seed counter
data_counter <- 0
seed_counter <- 0
# Simulation loop
for (sim in 1:sim_total) {
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
# Generate unique seed based on base + counter
data_counter <- data_counter + 1
this_seed <- seed + seed_counter
set.seed(this_seed)
log_entry <- paste0("data", counter, ".csv \nSimulation:", sim, ", Seed: ", this_seed, "\n", "\n")
cat(log_entry, file = log_file, append = TRUE)
# Your simulation using `this_seed`
# Reset counter
seed_counter <- seed_counter + 1
}
}
}
}
# Simulate longitudinal data
# ==== Setup ====
# Load packages
library(mclust)
library(tidyverse)
library(parallel)
# Load external functions
source("simulateGMM.R")
source("GMMclassifier.R")
source("numCores.R")
# Simulated data
seed <- 4881
set.seed(seed)
N_col <- c(10,100,500,1000)
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
n_indiv <- 325
# Parallel
parallel_process <- TRUE
# Specify parameters
params <- list(
cluster1 = list(mean = rnorm(N_col, mean = -1.5, sd = 0.1), cov = diag(N_col)),
cluster2 = list(mean = rnorm(N_col, mean = 0,    sd = 0.1), cov = diag(N_col)),
cluster3 = list(mean = rnorm(N_col, mean = 1.5,  sd = 0.1), cov = diag(N_col))
)
# ==== Simulation ====
# Set seed
set.seed(seed)
# Simulation loop
sim_total <- 50
datasets_per_sim <- 0  # Will be set after first sim
# Log file
log_file <- "data_sim_long.txt"
cat("Simulation of Longitudinal Data \n", file = log_file)
# Dataset and seed counter
data_counter <- 0
seed_counter <- 0
# Simulation loop
for (sim in 1:sim_total) {
for (n in seq(N_col)) {
if (N_col[n] == 10) {
n_groups <- c(2, 3)
n_clust <- c(2, 3)
} else if (N_col[n] == 100) {
n_groups <- c(2, 3, 4)
n_clust <- c(2, 3, 4)
} else {
n_groups <- c(2, 3, 4, 5)
n_clust <- c(2, 3, 4, 5)
}
for (g in seq(n_groups)) {
for (c in seq(n_clust)) {
# Generate unique seed based on base + counter
data_counter <- data_counter + 1
this_seed <- seed + seed_counter
set.seed(this_seed)
log_entry <- paste0("data", counter, ".csv \nSimulation: ", sim, ", Seed: ", this_seed, "\n", "\n")
cat(log_entry, file = log_file, append = TRUE)
# Your simulation using `this_seed`
# Reset counter
seed_counter <- seed_counter + 1
}
}
}
}
source(file.path("R Functions", "simulateLCMM.R"))
source("./R Functions/simulateLCMM.R")
getwd()
