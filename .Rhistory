# Load packages
library(tidyverse)
library(GGally)
# Set parameters
set.seed(4881)
n <- 419
p <- 10
# Simulate participant cluster membership
indiv_clust <- sample(c(1, 2, 3), size = n, replace = TRUE)
table(indiv_clust)
# Simulate participant visit times
# Create matrix to store data
sim_data <- matrix(NA, ncol = p, nrow = n)
# Generate random distribution parameters per cluster
cluster_params <- list(
cluster_1 = list(mean = runif(p, -20, 10), sd = runif(p, 0.5, 5)),
cluster_2 = list(mean = runif(p, -20, 10), sd = runif(p, 1, 4)),
cluster_3 = list(mean = rep(0, p), sd = rep(5, p))
)
# Generate data
for (protein in 1:p) {
protein_data <- numeric(n)
for (i in 1:n) {
# Simulate random normals for each protein and cluster
mu <- cluster_params[[paste0("cluster_", indiv_clust[i])]]$mean[[protein]]
sigma <-  cluster_params[[paste0("cluster_", indiv_clust[i])]]$sd[[protein]]
# Generate cluster assignment
protein_data[i] <- rnorm(1, mean = mu, sd = sigma)
}
# Add protein data to new column
sim_data[, protein] <- protein_data
}
# Convert to data frame
sim_data <- as.data.frame(sim_data)
# Assign column names
colnames(sim_data) <- paste0("Protein", 1:p)
# Assign labels to the clusters
cluster <- factor(indiv_clust, labels = c("1","2","Unassigned"))
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot <- sim_data %>%
select(Protein1:Protein5)
ggpairs(sim_data_plot, aes(color = cluster))
library(Mclust)
library(mclust)
?mclust
# Load packages
library(tidyverse)
library(GGally)
library(mclust)
# Set parameters
set.seed(4881)
n <- 419
p <- 10
# Simulate participant cluster membership
indiv_clust <- sample(c(1, 2, 3), size = n, replace = TRUE)
table(indiv_clust)
# Simulate participant visit times
# Create matrix to store data
sim_data <- matrix(NA, ncol = p, nrow = n)
# Generate random distribution parameters per cluster
cluster_params <- list(
cluster_1 = list(mean = runif(p, -20, 10), sd = runif(p, 0.5, 5)),
cluster_2 = list(mean = runif(p, -20, 10), sd = runif(p, 1, 4)),
cluster_3 = list(mean = rep(0, p), sd = rep(5, p))
)
# Generate data
for (protein in 1:p) {
protein_data <- numeric(n)
for (i in 1:n) {
# Simulate random normals for each protein and cluster
mu <- cluster_params[[paste0("cluster_", indiv_clust[i])]]$mean[[protein]]
sigma <-  cluster_params[[paste0("cluster_", indiv_clust[i])]]$sd[[protein]]
# Generate cluster assignment
protein_data[i] <- rnorm(1, mean = mu, sd = sigma)
}
# Add protein data to new column
sim_data[, protein] <- protein_data
}
# Convert to data frame
sim_data <- as.data.frame(sim_data)
# Assign column names
colnames(sim_data) <- paste0("Protein", 1:p)
# Assign labels to the clusters
cluster <- factor(indiv_clust, labels = c("1","2","Unassigned"))
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot <- sim_data %>%
select(Protein1:Protein5)
ggpairs(sim_data_plot, aes(color = cluster))
len(sim_data)
length(sim_data)
sim_data[1,]
sim_data[, 1]
# Fit GMM to each protein seperately
for (i in 1:length(sim_data)) {
data[i] <- Mclust(sim_data[, i])
}
for (i in 1:ncol(sim_data)) {
sim_data2[[i]] <- Mclust(sim_data[, i])
}
sim_data2 <- vector("list", ncol(sim_data))
for (i in 1:ncol(sim_data)) {
sim_data2[[i]] <- Mclust(sim_data[, i])
}
View(sim_data2)
mclust1 <- vector("list", ncol(sim_data))
sim_data2 <- data.frame()
for (i in 1:ncol(sim_data)) {
mclust1[[i]] <- Mclust(sim_data[, i])
sim_data2 <- mclust1[[i]]$data
}
for (i in 1:ncol(sim_data)) {
mclust1[[i]] <- Mclust(sim_data[, i])
sim_data2[i] <- mclust1[[i]]$data
}
mclust1 <- vector("list", ncol(sim_data))
sim_data2 <- data.frame()
for (i in 1:ncol(sim_data)) {
mclust1[[i]] <- Mclust(sim_data[, i])
sim_data2[, i] <- mclust1[[i]]$data
}
mclust1 <- vector("list", ncol(sim_data))
sim_data2 <- data.frame()
for (i in 1:ncol(sim_data)) {
mclust1[[i]] <- Mclust(sim_data[, i])
sim_data2[i, ] <- mclust1[[i]]$data
}
?data.frame
# Fit GMM to each protein seperately
# Initialize a list for GMM results
mclust1 <- vector("list", ncol(sim_data))
# Create an empty data frame with the same dimensions as sim_data
sim_data2 <- as.data.frame(matrix(NA, nrow = nrow(sim_data), ncol = ncol(sim_data)))
colnames(sim_data2) <- colnames(sim_data)  # Preserve column names
# Loop through each protein (column) and fit Mclust
for (i in 1:ncol(sim_data)) {
mclust1[[i]] <- Mclust(sim_data[, i])
sim_data2[, i] <- mclust1[[i]]$data  # Store clustered data column-wise
}
View(sim_data2)
colnames(sim_data2) <- colnames(sim_data)
View(sim_data2)
View(sim_data2)
View(mclust1)
mclust1[[i]]$classification
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot2 <- sim_data2 %>%
select(Protein1:Protein5)
cluster2 <- mclust1[[1:5]]$classification
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot2 <- sim_data2 %>%
select(Protein1:Protein5)
cluster2 <- mclust1[[1:5]]$classification
install.packages("coca")
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
data2[, i] <- mclust1[[i]]$data  # Store clustered data column-wise
}
# Initialize a list for GMM results
mclust1 <- vector("list", ncol(data))
## MultiCOCA
# Load packages
library(mclust)
library(coca)
# MultiCOCA function
multicoca <- function(data, clusters) {
# Initialize a list for GMM results
mclust1 <- vector("list", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
data2 <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each protein (column) and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
data2[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Change data to MOC
moc <- coca::buildMOC(data2, M = ncol(data2), K = clusters)
return(moc)
}
moc <- multicoca(sim_data, 2)
## MultiCOCA
# Load packages
library(mclust)
library(coca)
# MultiCOCA function
multicoca <- function(data, clusters) {
# Initialize a list for GMM results
mclust1 <- vector("list", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
data2 <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each protein (column) and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
data2[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# Change data to MOC
#moc <- coca::buildMOC(data2, M = ncol(data2), K = clusters)
return(data2)
}
data2 <- multicoca(sim_data, 2)
View(data2)
p<-10
list(mean = rep(0, p), sd = rep(5, p)
)
indiv_clust
cluster_params
# Load packages
library(tidyverse)
library(GGally)
library(mclust)
# Set parameters
set.seed(4881)
n <- 419
p <- 10
# Simulate participant cluster membership
indiv_clust <- sample(c(1, 2, 3), size = n, replace = TRUE)
table(indiv_clust)
# Simulate participant visit times
# Create matrix to store data
sim_data <- matrix(NA, ncol = p, nrow = n)
# Generate random distribution parameters per cluster
cluster_params <- list(
cluster_1 = list(mean = runif(p, -20, 10), sd = runif(p, 0.5, 5)),
cluster_2 = list(mean = runif(p, -20, 10), sd = runif(p, 1, 4)),
cluster_3 = list(mean = rep(0, p), sd = rep(5, p))
)
# Generate data
for (protein in 1:p) {
protein_data <- numeric(n)
for (i in 1:n) {
# Simulate random normals for each protein and cluster
mu <- cluster_params[[paste0("cluster_", indiv_clust[i])]]$mean[[protein]]
sigma <-  cluster_params[[paste0("cluster_", indiv_clust[i])]]$sd[[protein]]
# Generate cluster assignment
protein_data[i] <- rnorm(1, mean = mu, sd = sigma)
}
# Add protein data to new column
sim_data[, protein] <- protein_data
}
# Convert to data frame
sim_data <- as.data.frame(sim_data)
# Assign column names
colnames(sim_data) <- paste0("Protein", 1:p)
View(sim_data)
pheatmap::pheatmap(as.matrix(sim_data))
annotationRow <- as.data.frame(Clusters = cluster)
annotationRow <- as.data.frame("Clusters" = cluster)
cluster
annotationRow <- as.data.frame(cluster)
names(annotationRow) <- "Clusters"
annotationRow$Clusters
rownames(annotationRow$Clusters) <- rownames(sim_data)
rownames(sim_data)
annotationRow <- as.data.frame(as.matrix(cluster, drop = F))
annotationRow
names(annotationRow) <- "Clusters"
rownames(annotationRow$Clusters) <- rownames(sim_data)
rownames(annotationRow$Clusters)
annotationRow <- as.matrix(cluster, ncol = 1,drop = F)
annotationRow
annotationRow <- as.data.frame(as.matrix(cluster, drop = F))
rownames(annotationRow) <- rownames(sim_data)
names(annotationRow) <- "Clusters"
annotationRow
annotationRow[1:4,]
rownames(annotationRow)
pheatmap::pheatmap(as.matrix(sim_data), annotation_row = annotationRow)
rownames(as.matrix(sim_data))
pheatmap::pheatmap(sim_data, annotation_row = annotationRow)
simdata <- as.matrix(sim_data)
rownames(simdata) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(simdata, annotation_row = annotationRow)
mclust(simdata[,1])
library(mclust)
Mclust(simdata[,1])
model1 <- Mclust(simdata[,1])
model1$G
plot(model1)
# Assign column names
colnames(sim_data) <- paste0("Protein", 1:p)
# Assign labels to the clusters
cluster <- factor(indiv_clust, labels = c("1","2","Unassigned"))
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot <- sim_data %>%
select(Protein1:Protein5)
ggpairs(sim_data_plot, aes(color = cluster))
## MultiCOCA
# Load packages
library(mclust)
library(coca)
# MultiCOCA function
multicoca <- function(data, clusters) {
# Initialize a list for GMM results
mclust1 <- vector("list", ncol(data))
# Create an empty data frame with the same dimensions as sim_data
data2 <- as.data.frame(matrix(NA, nrow = nrow(data), ncol = ncol(data)))
# Loop through each protein (column) and fit Mclust
for (i in 1:ncol(data)) {
mclust1[[i]] <- Mclust(data[, i])
data2[, i] <- mclust1[[i]]$classification  # Store clustered data column-wise
}
# How do we deal if Mclust comes up with different numbers of clusters?
# Change data to MOC
#moc <- coca::buildMOC(data2, M = ncol(data2), K = clusters)
return(data2)
}
data2 <- multicoca(sim_data, 2)
View(data2)
clusters
adjustedRandIndex(cluster, data2[,1])
adjustedRandIndex(cluster, data2[,2])
adjustedRandIndex(cluster, data2[,3])
apply(data2, 2, adjustedRandIndex, cluster)
myfun <- function(x){length(unique(x))}
apply(data2, 2, myfun)
?coca::buildMOC
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
# Build matrix of clusters
outputBuildMOC <- buildMOC(data, M = 3, K = 6, distances = "cor")
# Extract matrix of clusters
matrixOfClusters <- outputBuildMOC$moc
View(matrixOfClusters)
datasetIndicator <- outputBuildMOC$datasetIndicator
# Prepare annotations
true_labels <- as.matrix(read.csv(
system.file("extdata", "cluster_labels.csv", package = "coca"),
row.names = 1))
annotations <- data.frame(true_labels = as.factor(true_labels))
# Plot matrix of clusters
plotMOC(moc,
datasetIndicator,
datasetNames = datasetNames,
annotations = annotations)
# Extract matrix of clusters and dataset indicator vector
moc <- outputBuildMOC$moc
datasetIndicator <- outputBuildMOC$datasetIndicator
# Prepare annotations
true_labels <- as.matrix(read.csv(
system.file("extdata", "cluster_labels.csv", package = "coca"),
row.names = 1))
annotations <- data.frame(true_labels = as.factor(true_labels))
# Plot matrix of clusters
plotMOC(moc,
datasetIndicator,
datasetNames = datasetNames,
annotations = annotations)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
# Create vector of dataset names, in the same order as they appear above
datasetNames <- c("Dataset1", "Dataset2", "Dataset3")
# Build matrix of clusters
outputBuildMOC <- buildMOC(data, M = 3, K = 6, distances = "cor")
# Extract matrix of clusters and dataset indicator vector
moc <- outputBuildMOC$moc
datasetIndicator <- outputBuildMOC$datasetIndicator
# Prepare annotations
true_labels <- as.matrix(read.csv(
system.file("extdata", "cluster_labels.csv", package = "coca"),
row.names = 1))
annotations <- data.frame(true_labels = as.factor(true_labels))
# Plot matrix of clusters
plotMOC(moc,
datasetIndicator,
datasetNames = datasetNames,
annotations = annotations)
simdata <- as.matrix(sim_data)
# Load packages
library(tidyverse)
library(GGally)
library(mclust)
# Write function to simulate data!
# Set parameters
set.seed(4881)
n <- 419
p <- 10
# Simulate participant cluster membership
indiv_clust <- sample(c(1, 2, 3), size = n, replace = TRUE)
table(indiv_clust)
# Create matrix to store data
sim_data <- matrix(NA, ncol = p, nrow = n)
# Generate random distribution parameters per cluster
cluster_params <- list(
cluster_1 = list(mean = runif(p, -20, 10), sd = runif(p, 0.5, 5)),
cluster_2 = list(mean = runif(p, -20, 10), sd = runif(p, 1, 4)),
cluster_3 = list(mean = rep(0, p), sd = rep(5, p))
)
# Generate data
for (protein in 1:p) {
protein_data <- numeric(n)
for (i in 1:n) {
# Simulate random normals for each protein and cluster
mu <- cluster_params[[paste0("cluster_", indiv_clust[i])]]$mean[[protein]]
sigma <-  cluster_params[[paste0("cluster_", indiv_clust[i])]]$sd[[protein]]
# Generate cluster assignment
protein_data[i] <- rnorm(1, mean = mu, sd = sigma)
}
# Add protein data to new column
sim_data[, protein] <- protein_data
}
# Convert to data frame
sim_data <- as.data.frame(sim_data)
# Assign column names
colnames(sim_data) <- paste0("Protein", 1:p)
# Assign labels to the clusters
cluster <- factor(indiv_clust, labels = c("1","2","Unassigned"))
# Plot the data and colour by cluster for the first 5 clusters
sim_data_plot <- sim_data %>%
select(Protein1:Protein5)
ggpairs(sim_data_plot, aes(color = cluster))
# Produce heatmap
simdata <- as.matrix(sim_data)
annotationRow <- as.data.frame(cluster)
names(annotationRow) <- "Clusters"
annotationRow$Clusters
# Produce heatmap
simdata <- as.matrix(sim_data)
annotationRow <- as.data.frame(cluster)
names(annotationRow) <- "Clusters"
rownames(simdata) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(simdata, annotation_row = annotationRow)
