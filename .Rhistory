data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
example <- clusterofclusters(data)
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data)
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data)
pred_labels_new <- example$clusterLabels
# Compare results
ari <- adjustedRandIndex(true_labels, pred_labels)
ari_new <- adjustedRandIndex(true_labels, pred_labels_new)
(ari = adjustedRandIndex(true_labels, pred_labels))
(ari_new = adjustedRandIndex(true_labels, pred_labels_new))
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data)
pred_labels_new <- example$clusterLabels
# Compare results
(ari = adjustedRandIndex(true_labels, pred_labels))
(ari_new = adjustedRandIndex(true_labels, pred_labels_new))
warnings()_
warnings()
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data)
pred_labels_new <- example$clusterLabels
# Compare results
(ari = adjustedRandIndex(true_labels, pred_labels))
(ari_new = adjustedRandIndex(true_labels, pred_labels_new))
source("~/Documents/MPhil Population Health Sciences/Dissertation/omics_clust/CK_cocatest.R", echo=TRUE)
source("~/Documents/MPhil Population Health Sciences/Dissertation/omics_clust/CK_cocatest.R", echo=TRUE)
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
moc <- clusterofclusters(data)
moc <- outputBuildMOC$moc
moc2 <- clusterofclusters(data)
moc == moc2
identical(moc, moc2)
which(mat1 != mat2, arr.ind = TRUE)
which(moc != moc2, arr.ind = TRUE)
View(moc)
View(moc2)
?coca
Mclust
?Mclust
moc2 <- clusterofclusters(data, k = 5)
# Load function
source("clusterofclusters.R")
moc2 <- clusterofclusters(data, k = 5)
identical(moc, moc2)
View(moc)
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
moc2 <- clusterofclusters(data, k = 5)
identical(moc, moc2)
diff_indices <- which(moc != moc2, arr.ind = TRUE)
View(diff_indices)
moc2 <- clusterofclusters(data, k = 5)
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
moc2 <- clusterofclusters(data, k = 5)
## COCA test area
# Load functions
source("simulateGMM.R")
source("clusterofclusters.R")
# Load packages
library(mclust)
# Create data - single clustering structure
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters1 <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
# Test on data1
outputCOCA <- clusterofclusters(sim_data)
clusters2 <- outputCOCA$clusterLabels
adjustedRandIndex(clusters1, clusters2)
traceback()
traceback()
outputCOCA <- clusterofclusters(sim_data, k = 3)
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
source("clusterofclusters.R")
outputCOCA <- clusterofclusters(sim_data, k = 3)
?consensusCluster
withCallingHandlers({
outputCOCA <- clusterofclusters(sim_data, k = 3)
}, warning = function(w) {
message("⚠️ Warning caught: ", conditionMessage(w))
traceback()
})
outputCOCA <- clusterofclusters(sim_data, k = 3, max.iter = 10000)
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters1 <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
outputBuildMOC_sim <- buildMOC(sim_data, M = N_col, distances = "cor")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters1 <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
sim_list <- lapply(sim_data, function(x) data.frame(x))
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col, distances = "cor")
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col)
moc_sim <- outputBuildMOC_sim$moc
outputCOCA_sim <- coca(moc)
clusterLabels <- outputCOCA_sim$clusterLabels
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data, k = 5)
pred_labels_new <- example$clusterLabels
# Compare results
(ari = adjustedRandIndex(true_labels, pred_labels))
(ari_new = adjustedRandIndex(true_labels, pred_labels_new))
# Try original coca on my simulated data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
# Test examples from the COCA package (Cabassi and Kirk (2019))
# Turn on warning messages
options(warn = 1)
# Load function
source("clusterofclusters.R")
source("simulateGMM.R")
# Load package
library(coca)
# Load data
data <- list()
data[[1]] <- as.matrix(read.csv(system.file("extdata", "dataset1.csv",
package = "coca"), row.names = 1))
data[[2]] <- as.matrix(read.csv(system.file("extdata", "dataset2.csv",
package = "coca"), row.names = 1))
data[[3]] <- as.matrix(read.csv(system.file("extdata", "dataset3.csv",
package = "coca"), row.names = 1))
true_labels <- as.matrix(read.csv(system.file("extdata", "cluster_labels.csv",
package = "coca"), row.names = 1))
# Run original COCA function
outputBuildMOC <- coca::buildMOC(data, M = 3, K = 5, distances = "cor")
moc <- outputBuildMOC$moc
example <- coca::coca(moc, K = 5)
pred_labels <- example$clusterLabels
# Run my COCA function
example_new <- clusterofclusters(data, k = 5)
pred_labels_new <- example$clusterLabels
# Compare results
(ari = adjustedRandIndex(true_labels, pred_labels))
(ari_new = adjustedRandIndex(true_labels, pred_labels_new))
# Try original coca on my simulated data
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 1, 5)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters1 <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
sim_list <- lapply(sim_data, function(x) data.frame(x))
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col)
moc_sim <- outputBuildMOC_sim$moc
outputCOCA_sim <- coca(moc)
clusterLabels <- outputCOCA_sim$clusterLabels
View(outputBuildMOC_sim)
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col, distances = "cor")
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col, distances = "cor")
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col, distances = "euclidean")
View(outputBuildMOC_sim)
outputBuildMOC_sim[["moc"]]
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -20, -10), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 20), sd = runif(N_col, 0.5, 2)),
cluster3 = list(mean = runif(N_col, 0, 0.5), sd = runif(N_col, 1, 10)))
sim_data <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881, grouping = "random")
clusters1 <- sim_data$cluster
sim_data <- sim_data[, 1:N_col]
sim_list <- lapply(sim_data, function(x) data.frame(x))
outputBuildMOC_sim <- buildMOC(sim_list, M = N_col, distances = "euclidean")
View(outputBuildMOC_sim)
View(sim_data)
library(lcmm)
install.packages("lcmm")
?hlme
??hlme
?NbClust
??NbClust
install_packages("NbClust")
install.packages("NbClust")
?NbClust
??NbClust
#### Testing of simulateGMM function in different scenarios
### Install relevant packages
library(tidyverse)
library(GGally)
library(mclust)
### Load function
source("simulateGMM.R")
#### Testing of simulateGMM function in different scenarios
### Install relevant packages
library(tidyverse)
library(GGally)
library(mclust)
### Load function
source("simulateGMM.R")
### Testing
## Parameters - means far apart
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
View(example1)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
### Load function
source("simulateGMM.R")
### Testing
## Parameters - means far apart
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
### Testing
## Parameters - means far apart
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
## Test: single clustering structure
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
source("simulateGMM.R")
N_col <- 10
params1 <- list(
cluster1 = list(mean = runif(N_col, -10, -5), sd = runif(N_col, 0.5, 1)),
cluster2 = list(mean = runif(N_col, 10, 15), sd = runif(N_col, 0.75, 3)),
cluster3 = list(mean = rep(0, N_col), sd = rep(5, N_col)))
example1 <- simulateGMM(3, 1, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
# Seperate data into data and clusters
example2_data <- example2[[1]]
clusters <- example2_data$cluster
example2 <- example2_data[, 1:N_col]
# Assign column names
colnames(example2_data) <- paste0("Protein", 1:N_col)
# Assign labels to the clusters
clusters <- factor(clusters, labels = c("1","2","Unassigned"))
# Produce heatmap
example2_new <- as.matrix(example2_data)
annotationRow <- as.data.frame(clusters)
names(annotationRow) <- "Clusters"
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow)
example2_new
example2_data <- example2[[1]]
clusters <- example2_data$cluster
## Test: two clustering structures defined randomly
example2 <- simulateGMM(3, 2, params1, n_indiv = 419, n_col = N_col, random_seed = 4881)
# Seperate data into data and clusters
example2_data <- example2[[1]]
clusters <- example2_data$cluster
example2_data <- example2_data[, 1:N_col]
# Assign column names
colnames(example2_data) <- paste0("Protein", 1:N_col)
# Assign labels to the clusters
clusters <- factor(clusters, labels = c("1","2","Unassigned"))
# Produce heatmap
example2_new <- as.matrix(example2_data)
annotationRow <- as.data.frame(clusters)
names(annotationRow) <- "Clusters"
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow)
annotationCol <- as.data.frame("ProteinClusters" = example2[[2]])
annotationCol <- as.data.frame(ProteinClusters = example2[[2]])
annotationCol <- as.data.frame(example2[[2]])
names(annotationCol) <- "ProteinClusters"
colnames(example2_new)
rownames(annotationCol) <- colnames(example2_new)
colnames(example2_new)
annotationCol
annotationCol <- as.data.frame(example2[[2]])
names(annotationCol) <- "ProteinClusters"
rownames(annotationCol) <- colnames(example2_new)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow, annotation_col = annotationCol)
annotationCol <- as.data.frame(as.factor(example2[[2]]))
names(annotationCol) <- "ProteinClusters"
rownames(annotationCol) <- colnames(example2_new)
rownames(example2_new) <- rownames(annotationRow)
annotationRow$Clusters <- as.factor(annotationRow$Clusters)
pheatmap::pheatmap(example2_new, annotation_row = annotationRow, annotation_col = annotationCol)
order(clusters)
pheatmap::pheatmap(example2_new[order(clusters),], annotation_row = annotationRow,
annotation_col = annotationCol, cluster_rows = F)
View(example2)
